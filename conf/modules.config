/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
            ext.args = '--quiet'
            publishDir = [
                [
                    path: { "${params.outdir}/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html}"
                ],
                [
                    path: { "${params.outdir}/fastqc/zips" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{zip}"
                ]
            ]
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
            ext.args   = [
                '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/trimgalore/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html}"
                ],
                [
                    path: { "${params.outdir}/trimgalore/fastqc/zips" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{zip}"
                ],
                [
                    path: { "${params.outdir}/trimgalore/logs" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ]
            ]
        }
    }
}

if (params.aligner == 'bowtie2') {
    process {
        withName: 'BOWTIE2_ALIGN' {
            ext.args   = ''
            ext.prefix = { "${meta.id}.Lb" }
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/library" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: false
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/library/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }
    }
}

if (!params.skip_multiqc) {
    process {
        withName: 'MULTIQC' {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                path: { [
                    "${params.outdir}/multiqc"
                ].join('') },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
